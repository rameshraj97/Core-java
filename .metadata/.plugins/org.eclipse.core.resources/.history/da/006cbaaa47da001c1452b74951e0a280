package com.chainsys.webapp.first;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.chainsys.minproject.commonutil.InvalidInputDataException;
import com.chainsys.minproject.commonutil.Validator;
import com.chainsys.minproject.dao.DoctorDao;
import com.chainsys.minproject.dao.EmployeeDao;
import com.chainsys.minproject.pojo.Doctor;

/**
 * Servlet implementation class Doctor1
 */
public class Doctor1 extends HttpServlet {
	private static final long serialVersionUID = 1L;

	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public Doctor1() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		response.getWriter().append("Served at: ").append(request.getContextPath());
		PrintWriter out = response.getWriter();
		List<Doctor> allDoctos = DoctorDao.getAllDoctors();
	    Iterator<Doctor> docIterator = allDoctos.iterator();
	    while (docIterator.hasNext()) {
			Doctor result = docIterator.next();
			out.println("<hr/>");
			out.println(result.getDoctor_id() +","  + result.getDoctor_name() + "," + result.getSpeciality()+ ","
					+ result.getCity() + "," + result.getPhone_no() + "," + result.getStandard_fees() + ","
					 + "</p>" );
			
	    }
	
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		PrintWriter out = response.getWriter();
		Doctor newdoc=new Doctor();
		int result = 0;
		String testname = null;
      try {
    	       
    	       String id =request.getParameter("id");
    	       try {
    	    	   Validator.checkStringForParseInt(id);
    	       }catch (InvalidInputDataException err) {
    			  err.printStackTrace();
    	       }
    	   	int docId = Integer.parseInt(id);
             try {
				Validator.CheckNumberForGreaterThanZero(docId);
			}catch(InvalidInputDataException err) {
				err.printStackTrace();
				}
			newdoc.setDoctor_id(docId);
//------------------------------------------------------
			
			String doc_name = request.getParameter("Docname");
			testname=doc_name;
			try {
				Validator.checkStringOnly(testname);
			}catch(InvalidInputDataException e) {
				e.printStackTrace();
			}
			
			try {
				Validator.checklengthOfString(doc_name);
			} catch (InvalidInputDataException err) {
				err.printStackTrace();
            }
			newdoc.setDoctor_name(doc_name);
//-------------------------------------------------------
			
			String speciality = request.getParameter("Speciality");
			testname = speciality;
			try {
				Validator.checkStringOnly(testname);
			} catch (InvalidInputDataException e) {
				e.printStackTrace();
				return;
			}
			try {
				Validator.checklengthOfString(speciality);
			} catch (InvalidInputDataException err) {
				err.printStackTrace();
			}
			newdoc.setSpeciality(speciality);
//----------------------------------			
		
			
			String city = request.getParameter("City");
			testname = city;
			try {
				Validator.checkStringOnly(testname);
			} catch (InvalidInputDataException e) {
				e.printStackTrace();
				return;
			}
			try {
				Validator.checklengthOfString(city);
			} catch (InvalidInputDataException err) {
				err.printStackTrace();
			}
			newdoc.setCity(city);
		


			
//---------------------------------------			
			String phoneno = request.getParameter("Phone_no");
			testname = city;
			try {
				Validator.checkStringForParseInt(phoneno);
			} catch (InvalidInputDataException e) {
				e.printStackTrace();
				return;
			}
			try {
				Validator.checklengthOfString(phoneno);
			} catch (InvalidInputDataException err) {
				err.printStackTrace();
			}
			newdoc.setPhone_no(docId);
//----------------------------------------------			
			String standardfees = request.getParameter("Standard_fees");
			testname = standardfees;
			try {
				Validator.checkStringOnly(testname);
			} catch (InvalidInputDataException e) {
				e.printStackTrace();
				return;
			}
			try {
				Validator.checkStringOnly(standardfees);
			} catch (InvalidInputDataException err) {
				err.printStackTrace();
			
			newdoc.setStandard_fees(docId);
			}
//--------------------------------------------------
			result = DoctorDao.insertDoctor(newdoc);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
		}
		out.println("<div> Add New Dactor: " + result + "</div>");
	}
	

}
        